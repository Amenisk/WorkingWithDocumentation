@page "/authorization"
@inject UserService UserService
@inject NavigationManager Navigation

@if(!UserService.IsAuthorized())
{
    <div class="card" style="width: 50%; margin: 100px 25% 0 25%">
        <div class="card-header">
            <h3 style="margin-left: 35%">Авторизация</h3>
        </div>
        <div class="card-body">
            <div class="form-group">
                <label>Выберите роль</label>
                <select name="role" @bind="auth_role">
                    <option value="customer">Заказчик</option>
                    <option value="designer">Проектировщик</option>
                    <option value="developer">Застройщик</option>
                </select>
            </div>
            <div class="form-group">
                <br>
                <label>Введите логин</label>
                <input @bind-value="auth_login" class="form-control" placeholder="Введите логин" required>
            </div>
            <div class="form-group">
                <br>
                <label>Введите пароль</label>
                <input type="password" @bind-value="auth_pass" class="form-control" placeholder="Введите пароль" required>
            </div>

            <div class="form-group">
                <button @onclick=Autorization class="btn btn-primary" style="margin: 10px 5% 0 28%">Войти</button>
                <button @onclick=Registration class="btn btn-primary" style="margin: 10px 28% 0 5%">Регистрация</button>
            </div>
        </div>
    </div>

    @if (isError)
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
}
else
{
    <div class="modal-body">
        <h5>Выйдите с аккаунта</h5>
        <p>Чтобы снова авторизироваться, нужно сначала выйти со своего аккаунта</p>
        <p><button class="btn btn-secondary popover-test" @onclick=UserService.LogOut>Выйти с аккаунта</button></p>
    </div>
}


@code {
    string auth_login = "";
    string auth_pass = "";
    string auth_role = "";
    bool isError = false;
    string errorMessage = "";

    private void Autorization()
    {
        if (auth_login != "" && auth_pass != "" && auth_role is not null)
        {
            switch (auth_role)
            {
                case "customer":
                    UserService.AuthorizeCustomer(auth_login, auth_pass);
                    break;

                case "designer":
                    UserService.AuthorizeDesigner(auth_login, auth_pass);
                    break;

                case "developer":
                    UserService.AuthorizeDeveloper(auth_login, auth_pass);
                    break;

                default:
                    break;
            }

            auth_pass = "";

            if (UserService.CurrentCustomer is not null 
                || UserService.CurrentDesigner is not null 
                || UserService.CurrentDeveloper is not null)
            {
                auth_login = "";
                Navigation.NavigateTo("/account");
                isError = false; 
            }
            else
            {
                errorMessage = "Неправильный логин или пароль!";
                isError = true;
            }
        }
    }

    private void Registration()
    {
        Navigation.NavigateTo("/registration");
    }
}
