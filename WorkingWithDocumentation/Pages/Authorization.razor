@page "/authorization"
@inject UserService UserService
@inject NavigationManager Navigation

@if(!UserService.IsAuthorized())
{
    <h3>Авторизация</h3>

    <div>
        <label>Выберите роль</label>
        <select name="role" @bind="auth_role">
            <option value="customer">Заказчик</option>
            <option value="designer">Проектировщик</option>
            <option value="developer">Застройщик</option>
        </select>
        <br /><br />
        <label>Введите логин</label>
        <input @bind-value="auth_login" placeholder="Введите логин">
        <br /><br />
        <label>Введите пароль</label>
        <input type="password" @bind-value="auth_pass" placeholder="Введите пароль">
        <br /><br />
        <button @onclick=Autorization name="authButton">Войти</button>
        <button @onclick=Registration name="authButton">Регистрация</button>
        <br /><br />
    </div>

    @if (isError)
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
}
else
{
    <div class="modal-body">
        <h5>Выйдите с аккаунта</h5>
        <p>Чтобы снова авторизироваться, нужно сначала выйти со своего аккаунта</p>
        <p><button class="btn btn-secondary popover-test" @onclick=UserService.LogOut>Выйти с аккаунта</button></p>
    </div>
}


@code {
    string auth_login = "";
    string auth_pass = "";
    string auth_role = "";
    bool isError = false;
    string errorMessage = "";

    private void Autorization()
    {
        if(auth_login != "" && auth_pass != "" && auth_role != "")
        {
            switch (auth_role)
            {
                case "customer":
                    UserService.AuthorizeCustomer(auth_login, auth_pass);
                    break;

                case "designer":
                    UserService.AuthorizeDesigner(auth_login, auth_pass);
                    break;

                case "developer":
                    UserService.AuthorizeDeveloper(auth_login, auth_pass);
                    break;

                default:
                    break;
            }

            auth_pass = "";

            if (UserService.CurrentCustomer is not null 
                || UserService.CurrentDesigner is not null 
                || UserService.CurrentDeveloper is not null)
            {
                auth_login = "";
                Navigation.NavigateTo("/account");
                isError = false; 
            }
            else
            {
                errorMessage = "Неправильный логин или пароль!";
                isError = true;
            }
        }
    }

    private void Registration()
    {
        Navigation.NavigateTo("/registration");
    }
}
